# ===========================================
# Tempo Docker Compose 配置文件
# 功能: 定义 Grafana Tempo 分布式追踪系统的容器化部署
# 版本: Tempo 2.6.0
# ===========================================

# Docker Compose 版本
version: "3.8"

# ==========================================
# 网络配置
# ==========================================
networks:
  # 追踪网络 - 用于连接所有追踪相关的服务
  tracing-network:
    external: true # 使用外部网络，需要预先创建
    # driver: bridge  # 网络驱动类型

  # 监控网络 - 用于连接监控相关的服务
  monitoring-network:
    external: true # 使用外部网络，需要预先创建

# ==========================================
# 服务定义
# ==========================================
services:
  # ==========================================
  # Grafana Tempo - 分布式追踪后端
  # ==========================================
  init:
    image: grafana/tempo:2.8.0
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
  tempo:
    # 使用官方 Grafana Tempo 2.8.0 镜像
    image: grafana/tempo:2.8.0

    # 容器名称
    container_name: tempo

    # 启动命令：指定配置文件路径
    command: ["-config.file=/etc/tempo.yaml"]

    # 以 root 用户运行（确保文件权限）
    user: root

    # ----------------------------------------
    # 挂载配置
    # ----------------------------------------
    volumes:
      # 挂载 Tempo 配置文件（只读）
      - ./tempo-with-metrics.yaml:/etc/tempo.yaml:ro
      # 挂载数据存储目录（持久化）
      - tempo-data:/var/tempo
      # 挂载时区配置（可选）
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - init
    # ----------------------------------------
    # 端口映射
    # ----------------------------------------
    ports:
      # Tempo HTTP API 端口（查询接口）
      - "3200:3200"
      # OTLP gRPC 接收端口（接收追踪数据）
      - "4317:4317"
      # OTLP HTTP 接收端口（接收追踪数据）
      - "4318:4318"

    # ----------------------------------------
    # 网络配置
    # ----------------------------------------
    networks:
      # 连接到追踪网络
      - tracing-network
      # 连接到监控网络（用于 Prometheus 抓取指标）
      - monitoring-network

    # ----------------------------------------
    # 重启策略
    # ----------------------------------------
    # 除非手动停止，否则总是重启
    restart: unless-stopped

    # ----------------------------------------
    # 环境变量配置
    # ----------------------------------------
    environment:
      # 设置日志级别为 info
      - TEMPO_LOG_LEVEL=info
      # 设置时区
      - TZ=Asia/Shanghai
      # JVM 内存配置（可选）
      - JAVA_OPTS=-Xmx1g -Xms512m

    # ----------------------------------------
    # 健康检查配置
    # ----------------------------------------
    healthcheck:
      # 健康检查命令
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3200/ready",
        ]
      # 检查间隔
      interval: 30s
      # 超时时间
      timeout: 10s
      # 重试次数
      retries: 3
      # 启动期间等待时间
      start_period: 40s

    # ----------------------------------------
    # 资源限制配置
    # ----------------------------------------
    deploy:
      resources:
        # 资源限制
        limits:
          # CPU 限制（2核）
          cpus: "2.0"
          # 内存限制（2GB）
          memory: 2G
        # 资源预留
        reservations:
          # CPU 预留（0.5核）
          cpus: "0.5"
          # 内存预留（512MB）
          memory: 512M

    # ----------------------------------------
    # 日志配置
    # ----------------------------------------
    logging:
      # 日志驱动
      driver: "json-file"
      options:
        # 最大日志文件大小
        max-size: "100m"
        # 保留的日志文件数量
        max-file: "3"
        # 日志标签
        labels: "service=tempo"

    # ----------------------------------------
    # 依赖关系（可选）
    # ----------------------------------------
    # depends_on:
    #   - prometheus  # 如果需要确保 Prometheus 先启动

# ==========================================
# 数据卷定义
# ==========================================
volumes:
  # Tempo 数据存储卷
  tempo-data:
    # 使用 Docker 管理的卷（推荐用于生产环境）
    driver: local
    # 卷标签
    labels:
      - "service=tempo"
      - "type=data"
    # 驱动选项（可选）
    # driver_opts:
    #   type: none
    #   o: bind
    #   device: /opt/tempo/data
