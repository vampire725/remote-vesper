# Logstash 企业级管道配置
# 包含完整的安全、认证和监控功能

# 输入配置
input {
  # Beats 输入（启用SSL和认证）
  beats {
    port => 5044
    host => "0.0.0.0"
    
    # SSL 配置
    ssl => true
    ssl_certificate => "/usr/share/logstash/config/certs/logstash/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash/logstash.key"
    ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca/ca.crt"]
    ssl_verify_mode => "force_peer"
    
    # 添加元数据
    add_field => {
      "input_type" => "beats"
      "security_level" => "authenticated"
    }
  }
  
  # TCP 输入（启用SSL）
  tcp {
    port => 5000
    host => "0.0.0.0"
    codec => json_lines
    
    # SSL 配置
    ssl_enable => true
    ssl_cert => "/usr/share/logstash/config/certs/logstash/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash/logstash.key"
    ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca/ca.crt"]
    ssl_verify => true
    
    add_field => {
      "input_type" => "tcp_ssl"
      "security_level" => "encrypted"
    }
  }
  
  # HTTP 输入（启用SSL）
  http {
    port => 8080
    host => "0.0.0.0"
    
    # SSL 配置
    ssl => true
    ssl_certificate => "/usr/share/logstash/config/certs/logstash/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash/logstash.key"
    
    add_field => {
      "input_type" => "http_ssl"
      "security_level" => "authenticated"
    }
  }
}

# 过滤器配置
filter {
  # 添加处理信息
  mutate {
    add_field => { 
      "logstash_host" => "%{host}"
      "processed_by" => "logstash-auth"
      "processing_timestamp" => "%{@timestamp}"
    }
  }
  
  # JSON 解析
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
      skip_on_invalid_json => true
    }
  }
  
  # 地理位置解析
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # 用户代理解析
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }
  
  # 安全事件检测
  if [message] =~ /(?i)(attack|hack|exploit|malware|virus|breach|unauthorized)/ {
    mutate {
      add_tag => ["security_event"]
    }
  }
}

# 输出配置
output {
  # 主要输出到 Elasticsearch
  elasticsearch {
    hosts => ["https://elasticsearch:9200"]
    user => "${ELASTIC_USERNAME}"
    password => "${ELASTIC_PASSWORD}"
    
    # SSL 配置
    ssl => true
    ssl_certificate_verification => true
    cacert => "/usr/share/logstash/config/certs/ca/ca.crt"
    
    # 索引配置
    index => "logstash-auth-%{+YYYY.MM.dd}"
    
    # 重试配置
    retry_on_conflict => 3
    retry_on_failure => 3
  }
  
  # 安全事件单独索引
  if "security_event" in [tags] {
    elasticsearch {
      hosts => ["https://elasticsearch:9200"]
      user => "${ELASTIC_USERNAME}"
      password => "${ELASTIC_PASSWORD}"
      ssl => true
      cacert => "/usr/share/logstash/config/certs/ca/ca.crt"
      index => "security-events-%{+YYYY.MM.dd}"
    }
  }
  
  # 错误处理
  if "_grokparsefailure" in [tags] {
    file {
      path => "/usr/share/logstash/logs/grok_failures.log"
      codec => json_lines
    }
  }
}